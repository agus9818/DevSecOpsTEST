name: DevSecOps - Security Pipeline on PR

on:
  pull_request:
    branches: ["main"]

jobs:
  security_pipeline:
    runs-on: ubuntu-latest
    permissions:
      issues: write    # Permiso para que la acción de ZAP pueda crear issues.
      contents: read   # Permiso para que la acción de checkout pueda leer el código.

    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      # --- 1. SAST Scan (Bandit) ---
      - name: Set up Python for SAST
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'
          cache: 'pip'

      - name: Install Bandit
        run: pip install bandit

      - name: Run Bandit Scan
        run: bandit -r . -x ./venv -o bandit_report.json -f json || true

      - name: Upload Bandit Report
        uses: actions/upload-artifact@v4
        with:
          name: bandit-sast-report
          path: bandit_report.json

      # --- 2. DAST Scan (ZAP) ---
      - name: Build Docker image
        run: docker build -f Dockerfile -t flask-app-dast .

      - name: Run Docker container in background
        run: docker run -d --name flask-app-container -p 5000:5000 flask-app-dast

      - name: Wait for application to be ready
        run: |
          echo "Waiting for application to start..."
          timeout 30s bash -c 'until curl -s http://localhost:5000/ > /dev/null; do echo "Waiting for app..."; sleep 2; done'
          echo "Application is ready!"

      - name: Run ZAP Baseline Scan
        uses: zaproxy/action-baseline@v0.14.0
        with:
          target: 'http://localhost:5000'
          # Opcional: Para que el pipeline no falle con advertencias (WARN).
          # Cambia el nivel mínimo de alerta que causa un fallo a 'High'.
          cmd_options: '-l FAIL'

      - name: Stop Docker container
        if: always()
        run: docker stop flask-app-container