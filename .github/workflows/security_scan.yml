name: DevSecOps - Security Pipeline on PR

on:
  pull_request:
    branches: ["main"]

jobs:
  security_pipeline:
    runs-on: ubuntu-latest
    permissions:
      issues: write    # Permiso para que la acción de ZAP pueda crear issues.
      contents: read   # Permiso para que la acción de checkout pueda leer el código.
      pull-requests: read # Permiso para que Gitleaks y Dependency Review puedan leer el PR.
      security-events: write # Permiso para subir los reportes SARIF a las alertas de seguridad.

    steps:
      - name: Checkout Code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0 # Fetches all history. Required for Gitleaks to scan PRs correctly.

      # --- 1. SAST Scan (Bandit) ---
      - name: Set up Python for SAST
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'
          cache: 'pip'

      - name: Install Bandit
        run: pip install bandit

      - name: Run Bandit Scan
        id: bandit_scan
        continue-on-error: true # Permite que el workflow continúe para que los reportes se suban.
        run: bandit -r . -x ./venv -o bandit_report.json -f json

      - name: Upload Bandit Report
        uses: actions/upload-artifact@v4 # Sube el reporte para que el otro workflow pueda usarlo.
        with:
          name: bandit-sast-report
          path: bandit_report.json

      # --- 1.5. SAST Scan (Gitleaks) ---
      - name: Run Gitleaks Scan
        uses: gitleaks/gitleaks-action@v2
        id: gitleaks_scan
        continue-on-error: true # Permite que el workflow continúe para que los reportes se suban.
        env:
          # Proporciona el token de GitHub como variable de entorno para que la acción pueda escanear Pull Requests.
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          # Gitleaks fallará si encuentra algún secreto.
          fail: true
          # Genera un reporte en formato SARIF para la integración con GitHub.
          report_format: sarif
          report_path: gitleaks-report.sarif

      - name: Upload Gitleaks Report
        if: steps.gitleaks_scan.outcome == 'failure'
        uses: actions/upload-artifact@v4
        with:
          name: gitleaks-sast-report
          path: gitleaks-report.sarif # Se mantiene como artefacto para descarga.

      - name: Upload Gitleaks SARIF to GitHub Security
        if: steps.gitleaks_scan.outcome == 'failure'
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: gitleaks-report.sarif
          category: gitleaks

      # --- 1.6. Dockerfile Hardening (Hadolint) ---
      - name: Run Hadolint Dockerfile Linter
        uses: hadolint/hadolint-action@v3.1.0
        with:
          dockerfile: Dockerfile
          # Esta acción fallará si el Dockerfile no sigue las mejores prácticas.
          ignore: DL3013 # Ignora la advertencia sobre no fijar versiones en pip, ya que usamos requirements.txt

      # --- 1.8. Fail Job if SAST Scans Failed (for Issue Creation) ---
      - name: Fail Job if Bandit or Gitleaks Found Issues
        if: steps.bandit_scan.outcome == 'failure' || steps.gitleaks_scan.outcome == 'failure'
        run: |
          echo "Bandit o Gitleaks encontraron problemas. Fallando el job para activar la creación de un issue."
          exit 1

      # --- 1.7. Dependency Review (SCA) ---
      - name: Dependency Review
        uses: actions/dependency-review-action@v4
        # Esta acción fallará si el PR introduce una dependencia con una vulnerabilidad conocida.

      # --- 2. DAST Scan (ZAP) ---
      - name: Build Docker image
        run: docker build -f Dockerfile -t flask-app-dast .

      - name: Run Docker container in background
        run: docker run -d --name flask-app-container -p 5000:5000 flask-app-dast

      - name: Wait for application to be ready
        run: |
          echo "Waiting for application to start..."
          timeout 30s bash -c 'until curl -s http://localhost:5000/ > /dev/null; do echo "Waiting for app..."; sleep 2; done'
          echo "Application is ready!"

      - name: Run ZAP Baseline Scan
        uses: zaproxy/action-baseline@v0.14.0
        with:
          target: 'http://localhost:5000'
          # Para que el pipeline falle en alertas de nivel 'High' o 'Critical' (comportamiento por defecto).
          # Si deseas un nivel diferente, usa 'fail_action_on_alert: 'Critical'' por ejemplo.
          # La opción '-l FAIL' en cmd_options no es la forma correcta de controlar el fallo de la acción.

      - name: Upload ZAP DAST Report
        if: always() # Asegura que el reporte se suba incluso si el escaneo falla
        uses: actions/upload-artifact@v4
        with:
          name: zap-dast-report
          path: |
            report_html.html
            report_md.md

      - name: Stop Docker container
        if: always()
        run: docker stop flask-app-container

  container_scan:
    name: Trivy Vulnerability Scan
    # Este job se ejecuta solo si 'security_pipeline' ha sido exitoso.
    needs: security_pipeline
    runs-on: ubuntu-latest
    permissions:
      contents: read # para checkout
      security-events: write # para subir el reporte SARIF

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Build Docker image for scanning
        # Se construye la imagen que será escaneada.
        run: docker build -f Dockerfile -t flask-app-scan:latest .

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@0.24.0
        with:
          image-ref: 'flask-app-scan:latest'
          format: 'sarif'
          output: 'trivy-results.sarif'
          severity: 'CRITICAL,HIGH'
          ignore-unfixed: true
          scanners: 'vuln'

      - name: Upload Trivy scan results to GitHub Security
        # No es necesario 'if: always()' porque si Trivy falla, queremos que el job falle.
        # El reporte se subirá si el escaneo se completa.
        # Si hay vulnerabilidades, el paso anterior falla y el workflow se detiene,
        # pero el reporte SARIF ya se ha generado y se puede subir en un paso posterior si se quisiera.
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: 'trivy-results.sarif'
          category: 'container'