name: DevSecOps - Security Pipeline on PR

on:
  pull_request:
    branches: ["main"]

jobs:
  security_pipeline:
    runs-on: ubuntu-latest
    permissions:
      issues: write    # Permiso para que la acción de ZAP pueda crear issues.
      contents: read   # Permiso para que la acción de checkout pueda leer el código.
      pull-requests: read # Permiso para que Gitleaks pueda leer los commits del PR.

    steps:
      - name: Checkout Code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0 # Fetches all history. Required for Gitleaks to scan PRs correctly.

      # --- 1. SAST Scan (Bandit) ---
      - name: Set up Python for SAST
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'
          cache: 'pip'

      - name: Install Bandit
        run: pip install bandit

      - name: Run Bandit Scan
        run: bandit -r . -x ./venv -o bandit_report.json -f json || true

      - name: Upload Bandit Report
        uses: actions/upload-artifact@v4
        with:
          name: bandit-sast-report
          path: bandit_report.json

      # --- 1.5. SAST Scan (Gitleaks) ---
      - name: Run Gitleaks Scan
        uses: gitleaks/gitleaks-action@v2
        env:
          # Proporciona el token de GitHub como variable de entorno para que la acción pueda escanear Pull Requests.
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          # Gitleaks fallará si encuentra algún secreto.
          fail: true
          # Genera un reporte en formato SARIF para la integración con GitHub.
          report_format: sarif
          report_path: gitleaks-report.sarif

      - name: Upload Gitleaks Report
        uses: actions/upload-artifact@v4
        with:
          name: gitleaks-sast-report
          path: gitleaks-report.sarif

 
      # --- 1.7. Dependency Review (SCA) ---
      - name: Dependency Review
        uses: actions/dependency-review-action@v4
        # Esta acción fallará si el PR introduce una dependencia con una vulnerabilidad conocida.
      - name: Install Trivy for SCA
        run: |
          # Se instala Trivy aquí para el escaneo de dependencias.
          sudo apt-get update && sudo apt-get install -y wget apt-transport-https gnupg lsb-release
          wget -qO - https://aquasecurity.github.io/trivy-repo/deb/public.key | sudo apt-key add -
          echo "deb https://aquasecurity.github.io/trivy-repo/deb $(lsb_release -sc) main" | sudo tee -a /etc/apt/sources.list.d/trivy.list
          sudo apt-get update && sudo apt-get install -y trivy
      - name: Run Trivy SCA Scan on requirements.txt
        run: trivy fs --scanners vuln --exit-code 1 --ignore-unfixed --severity CRITICAL,HIGH .

      # --- 2. DAST Scan (ZAP) ---
      - name: Build Docker image
        run: docker build -f Dockerfile -t flask-app-dast .

      - name: Run Docker container in background
        run: docker run -d --name flask-app-container -p 5000:5000 flask-app-dast

      - name: Wait for application to be ready
        run: |
          echo "Waiting for application to start..."
          timeout 30s bash -c 'until curl -s http://localhost:5000/ > /dev/null; do echo "Waiting for app..."; sleep 2; done'
          echo "Application is ready!"

      - name: Run ZAP Baseline Scan
        uses: zaproxy/action-baseline@v0.14.0
        with:
          target: 'http://localhost:5000'
          # Para que el pipeline falle en alertas de nivel 'High' o 'Critical' (comportamiento por defecto).
          # Si deseas un nivel diferente, usa 'fail_action_on_alert: 'Critical'' por ejemplo.
          # La opción '-l FAIL' en cmd_options no es la forma correcta de controlar el fallo de la acción.

      - name: Upload ZAP DAST Report
        if: always() # Asegura que el reporte se suba incluso si el escaneo falla
        uses: actions/upload-artifact@v4
        with:
          name: zap-dast-report
          path: |
            report_html.html
            report_md.md

      - name: Stop Docker container
        if: always()
        run: docker stop flask-app-container