name: Container Image Security Scan

on:
  pull_request:
    branches: ["main"]

jobs:
  container_scan:
    name: Trivy Vulnerability Scan
    runs-on: ubuntu-latest
    permissions:
      contents: read # para checkout
      actions: read # para que upload-sarif pueda leer metadatos del workflow
      security-events: write # para subir el reporte SARIF

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Build Docker image for scanning
        # Se construye la imagen que será escaneada.
        # Usamos -f Dockerfile para asegurar que se usa el archivo correcto.
        run: docker build -f Dockerfile -t flask-app-scan:latest .

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@0.24.0
        with:
          image-ref: 'flask-app-scan:latest'
          format: 'sarif'
          output: 'trivy-results.sarif'
          severity: 'CRITICAL,HIGH'
          ignore-unfixed: true
          scanners: 'vuln'
          # La acción fallará automáticamente si encuentra vulnerabilidades según la severidad.
          # También mostrará una tabla en los logs por defecto.

      - name: Upload Trivy scan results
        if: always() # Sube el reporte incluso si el paso anterior falla.
        uses: actions/upload-artifact@v4
        with:
          name: trivy-scan-report
          path: trivy-results.sarif

      - name: Upload Trivy scan results to GitHub Security
        if: always() # Sube el reporte incluso si el paso anterior falla.
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: 'trivy-results.sarif'
          category: 'container'