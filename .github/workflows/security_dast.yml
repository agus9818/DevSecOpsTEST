name: DevSecOps - Dynamic Security Scan (DAST)

on:
  pull_request:
    branches: [ main ]

jobs:
  zap_scan:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Debug Context Files
        run: ls -la

      # 1. Construir la Imagen de la Aplicaci칩n Flask
      - name: Build Flask App Image
        run: |
          docker build --no-cache -t flask-app-test:latest .

      - name: Debug Docker Images
        run: |
          echo "Verificando que app.py fue copiado..."
          docker run --rm flask-app-test:latest ls -la /app/
      # 2. Levantar el Contenedor de la Aplicaci칩n en Background
      - name: Start Flask App Container
        id: start_app
        run: |
          docker stop flask-app-container || true
          docker run -d --rm --name flask-app-container -p 5000:5000 flask-app-test:latest

      # Health Check: Espera a que la aplicaci칩n responda antes de escanear
      - name: Wait for Application to be Ready
        run: |
          echo "Waiting for application to be ready..."
          timeout 30s bash -c 'until curl -s http://localhost:5000/ > /dev/null; do echo "Waiting for app..."; sleep 2; done'

      # 3. Ejecutar el Escaneo DAST con OWASP ZAP
      - name: ZAP Scan (DAST)
        uses: zaproxy/action-baseline@v0.14.0
        with:
          # El objetivo es localhost:5000 porque el puerto fue mapeado
          target: 'http://localhost:5000' 
          docker_name: 'ghcr.io/zaproxy/zaproxy:stable' 
          fail_action: true # Falla el pipeline si se encuentran vulnerabilidades
          # Corregido error tipogr치fico: exlude -> exclude
          exclude_rules_file: '.zap_exclude_rules.tsv'
          allow_issue_writing: false

      # 4. Detener el Contenedor (Limpieza)
      - name: Stop Flask App Container
        if: always()
        run: docker stop flask-app-container